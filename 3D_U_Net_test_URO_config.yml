# Testing config file

model_path: /.../best_checkpoint.pytorch # Pass the save model path for testing
model:
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (crg - Conv3d+ReLU+GroupNorm)
  layer_order: gcr
  # initial number of feature maps
  f_maps: [32, 64, 128, 256]
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
predictor:
  name: 'StandardPredictor'
loaders:
  # save predictions to output_dir
  output_dir: /..../test_pred/ # Pass the path of the output directory
  # path to the raw data within the H5
  raw_internal_path: /raw
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 1
  # how many subprocesses to use for data loading
  num_workers: 1
  # test loaders configuration
  test:
    file_paths:
      - /...../test_h5 #Pass the testing image in .h5

    slice_builder:
      name: SliceBuilder
      patch_shape: [64, 64, 64]
      stride_shape: [20, 40, 40]

    transformer:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true
